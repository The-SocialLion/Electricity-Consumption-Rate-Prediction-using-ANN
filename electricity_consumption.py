# -*- coding: utf-8 -*-
"""Electricity Consumption.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rDVmz1NtDREyBdP6YtG0m-phRPPzC0rU
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import tensorflow as tf

df=pd.read_csv('train.csv')
df=df.drop(columns=['datetime','var2','ID'])
df=df.dropna(how='any')
df

X=df.iloc[:,:-1].values
y=df.iloc[:,-1].values

y=y.reshape(len(y),1)

print(X)
print("\n")
print(y)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

from sklearn.preprocessing import StandardScaler
nc1 = StandardScaler()
X_train=nc1.fit_transform(X_train)
X_test=nc1.fit_transform(X_test)

from sklearn.preprocessing import MinMaxScaler
nc2=MinMaxScaler()
y_train=nc2.fit_transform(y_train)
y_test=nc2.fit_transform(y_test)

y_train

ann = tf.keras.models.Sequential()
ann.add(tf.keras.layers.Dense(units=500,activation='relu'))
ann.add(tf.keras.layers.Dense(units=1000,activation='relu'))
ann.add(tf.keras.layers.Dense(units=1500,activation='relu'))
ann.add(tf.keras.layers.Dense(units=2000,activation='relu'))
ann.add(tf.keras.layers.Dense(units=1))

ann.compile(loss='mean_squared_error', optimizer='adam', metrics=['accuracy'])
history = ann.fit(X_train, y_train, batch_size=15, epochs=100, validation_data=(X_test, y_test))
ann.save("EC.h5")

plt.figure(0)
plt.plot(history.history['accuracy'], label='training accuracy')
plt.plot(history.history['val_accuracy'], label='val accuracy')
plt.title('Accuracy')
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.legend()
plt.savefig('Accuracy.png')

plt.figure(1)
plt.plot(history.history['loss'], label='training loss')
plt.plot(history.history['val_loss'], label='val loss')
plt.title('Loss')
plt.xlabel('epochs')
plt.ylabel('loss')
plt.legend()
plt.savefig('Loss.png')
print("Saved Model & Graph to disk")

"""**Prediction of the results**"""

model = tf.keras.models.load_model('EC.h5')
print("Loaded model from disk")

test=pd.read_csv('test.csv')
id=test['ID']
test=test.drop(columns=['datetime','var2','ID'])
test=test.dropna(how='any')
test

x=test.iloc[:,:].values
x=nc1.fit_transform(x)
x

y_pred= model.predict(x)
y_pred=nc2.inverse_transform(y_pred)
for i in range(len(id)):
  for j in range(len(y_pred)):
      if i==j:
        print("The consumption rate for the id {0} would be => {1} joules" .format(id[i],y_pred[j]))